# -*- coding: utf-8 -*-
"""bucketsort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/179DETSAQah6-VeFfaZ__UpU3cguqM71-
"""

# random 1k, 10k, 30k, 60k
# inverse 
import random
import timeit
import math
import matplotlib as mpl
from itertools import accumulate
mpl.use('Agg')
import matplotlib.pyplot as plt
def desenhaGrafico(x,y,xl = "Entradas", yl = "SaÃ­das", name='graph.png'):
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111)
    ax.plot(x,y, label = "Melhor Tempo")
    ax.legend(bbox_to_anchor=(1, 1),bbox_transform=plt.gcf().transFigure)
    plt.ylabel(yl)
    plt.xlabel(xl)
    fig.savefig(name)


EXAMPLE = [7, 6, 5, 1, 8, 9, 10]

def _get (x, n):
    _pow = 10**n
    return x%(_pow*10)//_pow


def quicksort(to_sort):
    start = 0
    end = len(to_sort) - 1
    if end == 0:
        return [to_sort[start]]
    if end == - 1:
        return []

    right = []
    left = []
    pivot = math.ceil((start + end)/2)

    for elem in range(start, pivot):
        if to_sort[elem] > to_sort[pivot]:
            right.append(to_sort[elem])
        else:
            left.append(to_sort[elem])

    for elem in range(pivot + 1, end + 1):
        if to_sort[elem] > to_sort[pivot]:
            right.append(to_sort[elem])
        else:
            left.append(to_sort[elem])

    sorted_left = quicksort(left)

    sorted_right = quicksort(right)


    _sorted_list = sorted_left + [to_sort[pivot]] + sorted_right
    return _sorted_list


def sort_step(to_sort):
    greater = (max(to_sort) + 1)//10
    lower = min(to_sort)//10
    _length = len(str(greater))
    count = 0
    clone = to_sort.copy()
    aux = {x:list() for x in range(lower, greater)}
    for element in clone:
        _index = element//10
        if aux.get(_index, None) is None:
            aux[_index] = []
        aux[_index].append(element)

    keys = quicksort(list(aux.keys()))
    clone = reduce(lambda i, j: i + quicksort(j), aux.values(), [])
    _sorted_list = clone
    return _sorted_list


print(sort_step(EXAMPLE))

def shuffle_random(n):
    result = list(range(n))
    random.shuffle(result)
    return result


# options = [1000, 10000, 30000, 60000]
# options = [100000,200000,300000,400000,500000]
# options = [1000, 2000, 3000]
# options = [40]
# options = [20000,40000,60000,80000,100000]
# options = [30000,40000,50000,60000,70000]
# options = [20000,30000,40000,50000,60000]
options = [15000,25000,35000,45000,55000]

# hypothesis
for opt in options:
    random_list = shuffle_random(opt)
    random_list_sorte = sort_step(random_list)
    a = random_list_sorte[0]
    for b in random_list_sorte:
        assert a <= b
    print(opt)


results_random = []
results_inverse = []
for option in options:
    tempo =   timeit.timeit("sort_step({})".format(shuffle_random(option)), setup="from __main__ import sort_step",number=1)
    results_random.append(tempo)
    tempo =   timeit.timeit("sort_step({})".format(list(range(option))[::-1]), setup="from __main__ import sort_step",number=1)
    results_inverse.append(tempo)
    print(option)

desenhaGrafico(options, results_random, name ='result_random.png')
desenhaGrafico(options, results_inverse, name='result_inverse.png')