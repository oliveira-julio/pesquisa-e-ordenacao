# -*- coding: utf-8 -*-
"""countingsort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RuSlwzAN8TEZ7V5Edh1kzppJr502YoLS
"""

# random 1k, 10k, 30k, 60k
# inverse 
import random
import timeit
import math
import matplotlib as mpl
from itertools import accumulate
mpl.use('Agg')
import matplotlib.pyplot as plt
def desenhaGrafico(x,y,xl = "Entradas", yl = "Sa√≠das", name='graph.png'):
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111)
    ax.plot(x,y, label = "Melhor Tempo")
    ax.legend(bbox_to_anchor=(1, 1),bbox_transform=plt.gcf().transFigure)
    plt.ylabel(yl)
    plt.xlabel(xl)
    fig.savefig(name)


EXAMPLE = [7, 6, 5, 1, 8, 9, 10]


def sort_step(to_sort):
    greater = max(to_sort)
    aux = [0] * (greater + 1)
    _sorted_list = to_sort.copy()
    for element in to_sort:
        aux[element] += 1

    aux = list(accumulate(aux))
    for element in to_sort:
        pos = aux[element] - 1
        _sorted_list[pos] = element
        aux[element] -= 1

    # _sorted_list = clone
    return _sorted_list


print(sort_step(EXAMPLE))

def shuffle_random(n):
    result = list(range(n))
    random.shuffle(result)
    return result


# options = [1000, 10000, 30000, 60000]
# options = [100000,200000,300000,400000,500000]
# options = [1000, 2000, 3000]
# options = [20000,40000,60000,80000,100000]
options = [30000,40000,50000,60000,70000]


# hypothesis
for opt in options:
    random_list = shuffle_random(opt)
    random_list_sorte = sort_step(random_list)
    a = random_list_sorte[0]
    for b in random_list_sorte:
        assert a <= b
    print(opt)


results_random = []
results_inverse = []
for option in options:
    tempo =   timeit.timeit("sort_step({})".format(shuffle_random(option)), setup="from __main__ import sort_step",number=1)
    results_random.append(tempo)
    tempo =   timeit.timeit("sort_step({})".format(list(range(option))[::-1]), setup="from __main__ import sort_step",number=1)
    results_inverse.append(tempo)
    print(option)

desenhaGrafico(options, results_random, name ='result_random.png')
desenhaGrafico(options, results_inverse, name='result_inverse.png')